# source: https://us1.prisma.sh/public-shardseeker-99/chess/dev
# timestamp: Sat Sep 01 2018 09:37:32 GMT+1000 (AEST)

type AggregateAnnotatedGame {
  count: Int!
}

type AggregateBlogPost {
  count: Int!
}

type AggregateChallenge {
  count: Int!
}

type AggregateFen {
  count: Int!
}

type AggregateMoveSet {
  count: Int!
}

type AggregateTimeControl {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AnnotatedGame implements Node {
  id: ID!
  startpos(where: FenWhereInput): Fen
  moveSets(where: MoveSetWhereInput, orderBy: MoveSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MoveSet!]
}

"""A connection to a list of items."""
type AnnotatedGameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnnotatedGameEdge]!
  aggregate: AggregateAnnotatedGame!
}

input AnnotatedGameCreateInput {
  startpos: FenCreateOneInput
  moveSets: MoveSetCreateManyInput
}

input AnnotatedGameCreateOneInput {
  create: AnnotatedGameCreateInput
  connect: AnnotatedGameWhereUniqueInput
}

"""An edge in a connection."""
type AnnotatedGameEdge {
  """The item at the end of the edge."""
  node: AnnotatedGame!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnnotatedGameOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnnotatedGamePreviousValues {
  id: ID!
}

type AnnotatedGameSubscriptionPayload {
  mutation: MutationType!
  node: AnnotatedGame
  updatedFields: [String!]
  previousValues: AnnotatedGamePreviousValues
}

input AnnotatedGameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnotatedGameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnotatedGameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnotatedGameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnnotatedGameWhereInput
}

input AnnotatedGameUpdateDataInput {
  startpos: FenUpdateOneInput
  moveSets: MoveSetUpdateManyInput
}

input AnnotatedGameUpdateInput {
  startpos: FenUpdateOneInput
  moveSets: MoveSetUpdateManyInput
}

input AnnotatedGameUpdateOneInput {
  create: AnnotatedGameCreateInput
  connect: AnnotatedGameWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AnnotatedGameUpdateDataInput
  upsert: AnnotatedGameUpsertNestedInput
}

input AnnotatedGameUpsertNestedInput {
  update: AnnotatedGameUpdateDataInput!
  create: AnnotatedGameCreateInput!
}

input AnnotatedGameWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnotatedGameWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnotatedGameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnotatedGameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startpos: FenWhereInput
  moveSets_every: MoveSetWhereInput
  moveSets_some: MoveSetWhereInput
  moveSets_none: MoveSetWhereInput
}

input AnnotatedGameWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type BlogPost implements Node {
  id: ID!
  slug: String!
  title: String!
  game(where: AnnotatedGameWhereInput): AnnotatedGame
  markup: String
  keywords: [String!]!
  published: Boolean
}

"""A connection to a list of items."""
type BlogPostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BlogPostEdge]!
  aggregate: AggregateBlogPost!
}

input BlogPostCreateInput {
  slug: String!
  title: String!
  markup: String
  published: Boolean
  keywords: BlogPostCreatekeywordsInput
  game: AnnotatedGameCreateOneInput
}

input BlogPostCreatekeywordsInput {
  set: [String!]
}

"""An edge in a connection."""
type BlogPostEdge {
  """The item at the end of the edge."""
  node: BlogPost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BlogPostOrderByInput {
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  markup_ASC
  markup_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BlogPostPreviousValues {
  id: ID!
  slug: String!
  title: String!
  markup: String
  keywords: [String!]!
  published: Boolean
}

type BlogPostSubscriptionPayload {
  mutation: MutationType!
  node: BlogPost
  updatedFields: [String!]
  previousValues: BlogPostPreviousValues
}

input BlogPostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BlogPostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlogPostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlogPostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BlogPostWhereInput
}

input BlogPostUpdateInput {
  slug: String
  title: String
  markup: String
  published: Boolean
  keywords: BlogPostUpdatekeywordsInput
  game: AnnotatedGameUpdateOneInput
}

input BlogPostUpdatekeywordsInput {
  set: [String!]
}

input BlogPostWhereInput {
  """Logical AND on all given filters."""
  AND: [BlogPostWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlogPostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlogPostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  markup: String

  """All values that are not equal to given value."""
  markup_not: String

  """All values that are contained in given list."""
  markup_in: [String!]

  """All values that are not contained in given list."""
  markup_not_in: [String!]

  """All values less than the given value."""
  markup_lt: String

  """All values less than or equal the given value."""
  markup_lte: String

  """All values greater than the given value."""
  markup_gt: String

  """All values greater than or equal the given value."""
  markup_gte: String

  """All values containing the given string."""
  markup_contains: String

  """All values not containing the given string."""
  markup_not_contains: String

  """All values starting with the given string."""
  markup_starts_with: String

  """All values not starting with the given string."""
  markup_not_starts_with: String

  """All values ending with the given string."""
  markup_ends_with: String

  """All values not ending with the given string."""
  markup_not_ends_with: String
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  game: AnnotatedGameWhereInput
}

input BlogPostWhereUniqueInput {
  id: ID
  slug: String
}

type Challenge implements Node {
  id: ID!
  user(where: UserWhereInput): User
  timeControls(where: TimeControlWhereInput): TimeControl
  rated: Boolean
}

"""A connection to a list of items."""
type ChallengeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChallengeEdge]!
  aggregate: AggregateChallenge!
}

input ChallengeCreateInput {
  rated: Boolean
  user: UserCreateOneInput
  timeControls: TimeControlCreateOneInput
}

"""An edge in a connection."""
type ChallengeEdge {
  """The item at the end of the edge."""
  node: Challenge!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChallengeOrderByInput {
  id_ASC
  id_DESC
  rated_ASC
  rated_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChallengePreviousValues {
  id: ID!
  rated: Boolean
}

type ChallengeSubscriptionPayload {
  mutation: MutationType!
  node: Challenge
  updatedFields: [String!]
  previousValues: ChallengePreviousValues
}

input ChallengeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChallengeWhereInput
}

input ChallengeUpdateInput {
  rated: Boolean
  user: UserUpdateOneInput
  timeControls: TimeControlUpdateOneInput
}

input ChallengeWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  rated: Boolean

  """All values that are not equal to given value."""
  rated_not: Boolean
  user: UserWhereInput
  timeControls: TimeControlWhereInput
}

input ChallengeWhereUniqueInput {
  id: ID
}

type Fen {
  fen: String!
}

"""A connection to a list of items."""
type FenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FenEdge]!
  aggregate: AggregateFen!
}

input FenCreateInput {
  fen: String!
}

input FenCreateOneInput {
  create: FenCreateInput
}

"""An edge in a connection."""
type FenEdge {
  """The item at the end of the edge."""
  node: Fen!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FenOrderByInput {
  fen_ASC
  fen_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FenPreviousValues {
  fen: String!
}

type FenSubscriptionPayload {
  mutation: MutationType!
  node: Fen
  updatedFields: [String!]
  previousValues: FenPreviousValues
}

input FenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FenSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FenSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FenWhereInput
}

input FenUpdateDataInput {
  fen: String
}

input FenUpdateInput {
  fen: String
}

input FenUpdateOneInput {
  create: FenCreateInput
  disconnect: Boolean
  delete: Boolean
  update: FenUpdateDataInput
  upsert: FenUpsertNestedInput
}

input FenUpsertNestedInput {
  update: FenUpdateDataInput!
  create: FenCreateInput!
}

input FenWhereInput {
  """Logical AND on all given filters."""
  AND: [FenWhereInput!]

  """Logical OR on all given filters."""
  OR: [FenWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FenWhereInput!]
  fen: String

  """All values that are not equal to given value."""
  fen_not: String

  """All values that are contained in given list."""
  fen_in: [String!]

  """All values that are not contained in given list."""
  fen_not_in: [String!]

  """All values less than the given value."""
  fen_lt: String

  """All values less than or equal the given value."""
  fen_lte: String

  """All values greater than the given value."""
  fen_gt: String

  """All values greater than or equal the given value."""
  fen_gte: String

  """All values containing the given string."""
  fen_contains: String

  """All values not containing the given string."""
  fen_not_contains: String

  """All values starting with the given string."""
  fen_starts_with: String

  """All values not starting with the given string."""
  fen_not_starts_with: String

  """All values ending with the given string."""
  fen_ends_with: String

  """All values not ending with the given string."""
  fen_not_ends_with: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MoveSet {
  moves: [String!]!
}

"""A connection to a list of items."""
type MoveSetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MoveSetEdge]!
  aggregate: AggregateMoveSet!
}

input MoveSetCreateInput {
  moves: MoveSetCreatemovesInput
}

input MoveSetCreateManyInput {
  create: [MoveSetCreateInput!]
}

input MoveSetCreatemovesInput {
  set: [String!]
}

"""An edge in a connection."""
type MoveSetEdge {
  """The item at the end of the edge."""
  node: MoveSet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MoveSetOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MoveSetPreviousValues {
  moves: [String!]!
}

type MoveSetSubscriptionPayload {
  mutation: MutationType!
  node: MoveSet
  updatedFields: [String!]
  previousValues: MoveSetPreviousValues
}

input MoveSetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MoveSetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MoveSetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MoveSetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MoveSetWhereInput
}

input MoveSetUpdateInput {
  moves: MoveSetUpdatemovesInput
}

input MoveSetUpdateManyInput {
  create: [MoveSetCreateInput!]
}

input MoveSetUpdatemovesInput {
  set: [String!]
}

input MoveSetWhereInput {
  """Logical AND on all given filters."""
  AND: [MoveSetWhereInput!]

  """Logical OR on all given filters."""
  OR: [MoveSetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MoveSetWhereInput!]
}

type Mutation {
  createBlogPost(data: BlogPostCreateInput!): BlogPost!
  createChallenge(data: ChallengeCreateInput!): Challenge!
  createFen(data: FenCreateInput!): Fen!
  createUser(data: UserCreateInput!): User!
  createTimeControl(data: TimeControlCreateInput!): TimeControl!
  createMoveSet(data: MoveSetCreateInput!): MoveSet!
  createAnnotatedGame(data: AnnotatedGameCreateInput!): AnnotatedGame!
  updateBlogPost(data: BlogPostUpdateInput!, where: BlogPostWhereUniqueInput!): BlogPost
  updateChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTimeControl(data: TimeControlUpdateInput!, where: TimeControlWhereUniqueInput!): TimeControl
  updateAnnotatedGame(data: AnnotatedGameUpdateInput!, where: AnnotatedGameWhereUniqueInput!): AnnotatedGame
  deleteBlogPost(where: BlogPostWhereUniqueInput!): BlogPost
  deleteChallenge(where: ChallengeWhereUniqueInput!): Challenge
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTimeControl(where: TimeControlWhereUniqueInput!): TimeControl
  deleteAnnotatedGame(where: AnnotatedGameWhereUniqueInput!): AnnotatedGame
  upsertBlogPost(where: BlogPostWhereUniqueInput!, create: BlogPostCreateInput!, update: BlogPostUpdateInput!): BlogPost!
  upsertChallenge(where: ChallengeWhereUniqueInput!, create: ChallengeCreateInput!, update: ChallengeUpdateInput!): Challenge!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTimeControl(where: TimeControlWhereUniqueInput!, create: TimeControlCreateInput!, update: TimeControlUpdateInput!): TimeControl!
  upsertAnnotatedGame(where: AnnotatedGameWhereUniqueInput!, create: AnnotatedGameCreateInput!, update: AnnotatedGameUpdateInput!): AnnotatedGame!
  updateManyBlogPosts(data: BlogPostUpdateInput!, where: BlogPostWhereInput): BatchPayload!
  updateManyChallenges(data: ChallengeUpdateInput!, where: ChallengeWhereInput): BatchPayload!
  updateManyFens(data: FenUpdateInput!, where: FenWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyTimeControls(data: TimeControlUpdateInput!, where: TimeControlWhereInput): BatchPayload!
  updateManyMoveSets(data: MoveSetUpdateInput!, where: MoveSetWhereInput): BatchPayload!
  updateManyAnnotatedGames(data: AnnotatedGameUpdateInput!, where: AnnotatedGameWhereInput): BatchPayload!
  deleteManyBlogPosts(where: BlogPostWhereInput): BatchPayload!
  deleteManyChallenges(where: ChallengeWhereInput): BatchPayload!
  deleteManyFens(where: FenWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTimeControls(where: TimeControlWhereInput): BatchPayload!
  deleteManyMoveSets(where: MoveSetWhereInput): BatchPayload!
  deleteManyAnnotatedGames(where: AnnotatedGameWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  blogPosts(where: BlogPostWhereInput, orderBy: BlogPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlogPost]!
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge]!
  fens(where: FenWhereInput, orderBy: FenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fen]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  timeControls(where: TimeControlWhereInput, orderBy: TimeControlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeControl]!
  moveSets(where: MoveSetWhereInput, orderBy: MoveSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MoveSet]!
  annotatedGames(where: AnnotatedGameWhereInput, orderBy: AnnotatedGameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnnotatedGame]!
  blogPost(where: BlogPostWhereUniqueInput!): BlogPost
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  user(where: UserWhereUniqueInput!): User
  timeControl(where: TimeControlWhereUniqueInput!): TimeControl
  annotatedGame(where: AnnotatedGameWhereUniqueInput!): AnnotatedGame
  blogPostsConnection(where: BlogPostWhereInput, orderBy: BlogPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlogPostConnection!
  challengesConnection(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeConnection!
  fensConnection(where: FenWhereInput, orderBy: FenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FenConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  timeControlsConnection(where: TimeControlWhereInput, orderBy: TimeControlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeControlConnection!
  moveSetsConnection(where: MoveSetWhereInput, orderBy: MoveSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MoveSetConnection!
  annotatedGamesConnection(where: AnnotatedGameWhereInput, orderBy: AnnotatedGameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnnotatedGameConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  blogPost(where: BlogPostSubscriptionWhereInput): BlogPostSubscriptionPayload
  challenge(where: ChallengeSubscriptionWhereInput): ChallengeSubscriptionPayload
  fen(where: FenSubscriptionWhereInput): FenSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  timeControl(where: TimeControlSubscriptionWhereInput): TimeControlSubscriptionPayload
  moveSet(where: MoveSetSubscriptionWhereInput): MoveSetSubscriptionPayload
  annotatedGame(where: AnnotatedGameSubscriptionWhereInput): AnnotatedGameSubscriptionPayload
}

type TimeControl implements Node {
  id: ID!
  increment: Float
  base: Float
  class: TimeControlClasses
  isCorrespondence: Boolean
}

enum TimeControlClasses {
  BULLET
  BLITZ
  RAPID
  CLASSIC
}

"""A connection to a list of items."""
type TimeControlConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeControlEdge]!
  aggregate: AggregateTimeControl!
}

input TimeControlCreateInput {
  increment: Float
  base: Float
  class: TimeControlClasses
  isCorrespondence: Boolean
}

input TimeControlCreateOneInput {
  create: TimeControlCreateInput
  connect: TimeControlWhereUniqueInput
}

"""An edge in a connection."""
type TimeControlEdge {
  """The item at the end of the edge."""
  node: TimeControl!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeControlOrderByInput {
  id_ASC
  id_DESC
  increment_ASC
  increment_DESC
  base_ASC
  base_DESC
  class_ASC
  class_DESC
  isCorrespondence_ASC
  isCorrespondence_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TimeControlPreviousValues {
  id: ID!
  increment: Float
  base: Float
  class: TimeControlClasses
  isCorrespondence: Boolean
}

type TimeControlSubscriptionPayload {
  mutation: MutationType!
  node: TimeControl
  updatedFields: [String!]
  previousValues: TimeControlPreviousValues
}

input TimeControlSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeControlSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeControlSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeControlSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeControlWhereInput
}

input TimeControlUpdateDataInput {
  increment: Float
  base: Float
  class: TimeControlClasses
  isCorrespondence: Boolean
}

input TimeControlUpdateInput {
  increment: Float
  base: Float
  class: TimeControlClasses
  isCorrespondence: Boolean
}

input TimeControlUpdateOneInput {
  create: TimeControlCreateInput
  connect: TimeControlWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TimeControlUpdateDataInput
  upsert: TimeControlUpsertNestedInput
}

input TimeControlUpsertNestedInput {
  update: TimeControlUpdateDataInput!
  create: TimeControlCreateInput!
}

input TimeControlWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeControlWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeControlWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeControlWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  increment: Float

  """All values that are not equal to given value."""
  increment_not: Float

  """All values that are contained in given list."""
  increment_in: [Float!]

  """All values that are not contained in given list."""
  increment_not_in: [Float!]

  """All values less than the given value."""
  increment_lt: Float

  """All values less than or equal the given value."""
  increment_lte: Float

  """All values greater than the given value."""
  increment_gt: Float

  """All values greater than or equal the given value."""
  increment_gte: Float
  base: Float

  """All values that are not equal to given value."""
  base_not: Float

  """All values that are contained in given list."""
  base_in: [Float!]

  """All values that are not contained in given list."""
  base_not_in: [Float!]

  """All values less than the given value."""
  base_lt: Float

  """All values less than or equal the given value."""
  base_lte: Float

  """All values greater than the given value."""
  base_gt: Float

  """All values greater than or equal the given value."""
  base_gte: Float
  class: TimeControlClasses

  """All values that are not equal to given value."""
  class_not: TimeControlClasses

  """All values that are contained in given list."""
  class_in: [TimeControlClasses!]

  """All values that are not contained in given list."""
  class_not_in: [TimeControlClasses!]
  isCorrespondence: Boolean

  """All values that are not equal to given value."""
  isCorrespondence_not: Boolean
}

input TimeControlWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  sub: String!
  name: String!
  rating: Float
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  sub: String!
  name: String!
  rating: Float
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  sub_ASC
  sub_DESC
  name_ASC
  name_DESC
  rating_ASC
  rating_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  sub: String!
  name: String!
  rating: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  sub: String
  name: String
  rating: Float
}

input UserUpdateInput {
  sub: String
  name: String
  rating: Float
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sub: String

  """All values that are not equal to given value."""
  sub_not: String

  """All values that are contained in given list."""
  sub_in: [String!]

  """All values that are not contained in given list."""
  sub_not_in: [String!]

  """All values less than the given value."""
  sub_lt: String

  """All values less than or equal the given value."""
  sub_lte: String

  """All values greater than the given value."""
  sub_gt: String

  """All values greater than or equal the given value."""
  sub_gte: String

  """All values containing the given string."""
  sub_contains: String

  """All values not containing the given string."""
  sub_not_contains: String

  """All values starting with the given string."""
  sub_starts_with: String

  """All values not starting with the given string."""
  sub_not_starts_with: String

  """All values ending with the given string."""
  sub_ends_with: String

  """All values not ending with the given string."""
  sub_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
}

input UserWhereUniqueInput {
  id: ID
  sub: String
}
